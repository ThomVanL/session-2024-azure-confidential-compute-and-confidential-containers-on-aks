{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.24.24.22086",
      "templateHash": "12642852256178737173"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Required. Specifies the Azure location where the key vault should be created."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Required. Admin username of the Virtual Machine."
      }
    },
    "adminPasswordOrKey": {
      "type": "securestring",
      "metadata": {
        "description": "Required. Password or ssh key for the Virtual Machine."
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "password",
        "sshPublicKey"
      ],
      "metadata": {
        "description": "Optional. Type of authentication to use on the Virtual Machine."
      }
    },
    "keyNotBefore": {
      "type": "int",
      "defaultValue": "[dateTimeToEpoch(utcNow())]",
      "metadata": {
        "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
      }
    },
    "keyExpiration": {
      "type": "int",
      "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1Y'))]",
      "metadata": {
        "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z."
      }
    },
    "vmName": {
      "type": "string",
      "metadata": {
        "description": "Required. Name of the Virtual Machine."
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_DC2ads_v5",
      "allowedValues": [
        "Standard_DC2ads_v5",
        "Standard_EC2ads_v5"
      ],
      "metadata": {
        "description": "Optional. Size of the VM."
      }
    },
    "osImageName": {
      "type": "string",
      "defaultValue": "Ubuntu 20.04 LTS Gen 2",
      "allowedValues": [
        "Windows Server 2022 Gen 2",
        "Windows Server 2019 Gen 2",
        "Ubuntu 20.04 LTS Gen 2",
        "Ubuntu 22.04 LTS Gen 2"
      ],
      "metadata": {
        "description": "Optional. OS Image for the Virtual Machine"
      }
    },
    "osDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "StandardSSD_LRS"
      ],
      "metadata": {
        "description": "Optional. OS disk type of the Virtual Machine."
      }
    },
    "bootDiagnostics": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Optional. Enable boot diagnostics setting of the Virtual Machine."
      }
    },
    "securityType": {
      "type": "string",
      "defaultValue": "DiskWithVMGuestState",
      "allowedValues": [
        "VMGuestStateOnly",
        "DiskWithVMGuestState"
      ],
      "metadata": {
        "description": "Optional. Specifies the EncryptionType of the managed disk. It is set to DiskWithVMGuestState for encryption of the managed disk along with VMGuestState blob, and VMGuestStateOnly for encryption of just the VMGuestState blob. NOTE: It can be set for only Confidential VMs."
      }
    },
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "Required. Specifies the name of the key vault."
      }
    },
    "enabledForDeployment": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
      }
    },
    "enabledForDiskEncryption": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
      }
    },
    "enabledForTemplateDeployment": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
      }
    },
    "tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "metadata": {
        "description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
      }
    },
    "keyName": {
      "type": "string",
      "metadata": {
        "description": "Required. Specifies the name of the key that you want to create."
      }
    },
    "keyType": {
      "type": "string",
      "defaultValue": "RSA-HSM",
      "allowedValues": [
        "EC-HSM",
        "RSA-HSM"
      ],
      "metadata": {
        "description": "Optional. The type of the key. For valid values, see JsonWebKeyType. Must be backed by HSM, for secure key release."
      }
    },
    "keyExportable": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Specifies whether the key should be exportable, \"true\" is required for secure key release."
      }
    },
    "keyEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Determines whether or not the object is enabled, \"true\" is required for secure key release."
      }
    },
    "curveName": {
      "type": "string",
      "defaultValue": "P-256",
      "allowedValues": [
        "P-256",
        "P-256K",
        "P-384",
        "P-521"
      ],
      "metadata": {
        "description": "Optional. The elliptic curve name. For valid values, see JsonWebKeyCurveName."
      }
    },
    "keySize": {
      "type": "int",
      "defaultValue": -1,
      "metadata": {
        "description": "Optional. The key size in bits. For example: 2048, 3072, or 4096 for RSA."
      }
    },
    "keyOps": {
      "type": "array",
      "defaultValue": [
        "encrypt",
        "decrypt"
      ],
      "allowedValues": [
        "decrypt",
        "encrypt",
        "import",
        "sign",
        "unwrapKey",
        "verify",
        "wrapKey"
      ],
      "metadata": {
        "description": "Optional. Specifies the key operations that can be perform on the specific key. String array containing any of: \"decrypt\", \"encrypt\", \"import\", \"release\", \"sign\", \"unwrapKey\", \"verify\", \"wrapKey\""
      }
    }
  },
  "variables": {
    "releasePolicyContentType": "application/json; charset=utf-8",
    "releasePolicyData": "eyJ2ZXJzaW9uIjoiMS4wLjAiLCJhbnlPZiI6W3siYXV0aG9yaXR5IjoiaHR0cHM6Ly9zaGFyZWR3ZXUud2V1LmF0dGVzdC5henVyZS5uZXQiLCJhbGxPZiI6W3siYW55T2YiOlt7ImNsYWltIjoieC1tcy1pc29sYXRpb24tdGVlLngtbXMtYXR0ZXN0YXRpb24tdHlwZSIsImVxdWFscyI6InRkeHZtIn0seyJjbGFpbSI6IngtbXMtaXNvbGF0aW9uLXRlZS54LW1zLWF0dGVzdGF0aW9uLXR5cGUiLCJlcXVhbHMiOiJzZXZzbnB2bSJ9XX0seyJjbGFpbSI6IngtbXMtaXNvbGF0aW9uLXRlZS54LW1zLWNvbXBsaWFuY2Utc3RhdHVzIiwiZXF1YWxzIjoiYXp1cmUtY29tcGxpYW50LWN2bSJ9XX1dfQ==",
    "imageList": {
      "Windows Server 2022 Gen 2": {
        "publisher": "microsoftwindowsserver",
        "offer": "windowsserver",
        "sku": "2022-datacenter-smalldisk-g2",
        "version": "latest"
      },
      "Windows Server 2019 Gen 2": {
        "publisher": "microsoftwindowsserver",
        "offer": "windowsserver",
        "sku": "2019-datacenter-smalldisk-g2",
        "version": "latest"
      },
      "Ubuntu 20.04 LTS Gen 2": {
        "publisher": "Canonical",
        "offer": "0001-com-ubuntu-confidential-vm-focal",
        "sku": "20_04-lts-cvm",
        "version": "latest"
      },
      "Ubuntu 22.04 LTS Gen 2": {
        "publisher": "canonical",
        "offer": "0001-com-ubuntu-confidential-vm-jammy",
        "sku": "22_04-lts-cvm",
        "version": "latest"
      }
    },
    "virtualNetworkName": "[format('{0}-vnet', parameters('vmName'))]",
    "subnetName": "[format('{0}-vnet-sn', parameters('vmName'))]",
    "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
    "addressPrefix": "10.0.0.0/16",
    "subnetPrefix": "10.0.0.0/24",
    "isWindows": "[contains(parameters('osImageName'), 'Windows')]",
    "roleDefKeyVaultCryptoServiceReleaseUser": "[resourceId('Microsoft.Authorization/roleAssignments', '08bbd89e-9f13-488c-ac41-acfcb10c90ab')]",
    "extensionName": "[if(variables('isWindows'), 'AzureDiskEncryption', 'AzureDiskEncryptionForLinux')]",
    "extensionVersion": "[if(variables('isWindows'), '2.2', '1.0')]",
    "extensionPublisher": "Microsoft.Azure.Security"
  },
  "resources": [
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2023-06-01",
      "name": "[format('{0}-ip', parameters('vmName'))]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2023-06-01",
      "name": "[format('{0}-nsg', parameters('vmName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "[if(variables('isWindows'), 'RDP', 'SSH')]",
            "properties": {
              "priority": 100,
              "protocol": "Tcp",
              "access": "Allow",
              "direction": "Inbound",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "[if(variables('isWindows'), '3389', '22')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2023-06-01",
      "name": "[variables('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg', parameters('vmName')))]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg', parameters('vmName')))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2023-06-01",
      "name": "[format('{0}-nic', parameters('vmName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetResourceId')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-ip', parameters('vmName')))]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-ip', parameters('vmName')))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2023-09-01",
      "name": "[parameters('vmName')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "[parameters('bootDiagnostics')]"
          }
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "storageProfile": {
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[parameters('osDiskType')]",
              "securityProfile": {
                "securityEncryptionType": "[parameters('securityType')]"
              }
            }
          },
          "imageReference": "[variables('imageList')[parameters('osImageName')]]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', parameters('vmName')))]"
            }
          ]
        },
        "osProfile": {
          "computerName": "[parameters('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), null(), createObject('disablePasswordAuthentication', 'true', 'ssh', createObject('publicKeys', createArray(createObject('keyData', parameters('adminPasswordOrKey'), 'path', format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername')))))))]",
          "windowsConfiguration": "[if(not(variables('isWindows')), null(), createObject('enableAutomaticUpdates', 'true', 'provisionVmAgent', 'true'))]"
        },
        "securityProfile": {
          "uefiSettings": {
            "secureBootEnabled": true,
            "vTpmEnabled": true
          },
          "securityType": "ConfidentialVM"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', parameters('vmName')))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "name": "[parameters('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "enabledForDeployment": "[parameters('enabledForDeployment')]",
        "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
        "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
        "tenantId": "[parameters('tenantId')]",
        "enableRbacAuthorization": true,
        "sku": {
          "name": "premium",
          "family": "A"
        },
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices"
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/keys",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('keyName'))]",
      "properties": {
        "kty": "[parameters('keyType')]",
        "attributes": {
          "exportable": "[parameters('keyExportable')]",
          "enabled": "[parameters('keyEnabled')]",
          "nbf": "[if(equals(parameters('keyNotBefore'), -1), null(), parameters('keyNotBefore'))]",
          "exp": "[if(equals(parameters('keyExpiration'), -1), null(), parameters('keyExpiration'))]"
        },
        "curveName": "[parameters('curveName')]",
        "keySize": "[if(equals(parameters('keySize'), -1), null(), parameters('keySize'))]",
        "keyOps": "[parameters('keyOps')]",
        "release_policy": {
          "contentType": "[variables('releasePolicyContentType')]",
          "data": "[variables('releasePolicyData')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}/keys/{1}', parameters('keyVaultName'), parameters('keyName'))]",
      "name": "[guid(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('keyName')), resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), variables('roleDefKeyVaultCryptoServiceReleaseUser'))]",
      "properties": {
        "principalType": "ServicePrincipal",
        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2023-09-01', 'full').identity.principalId]",
        "roleDefinitionId": "[variables('roleDefKeyVaultCryptoServiceReleaseUser')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
        "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('keyName'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2023-09-01",
      "name": "[format('{0}/{1}', parameters('vmName'), variables('extensionName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "[variables('extensionPublisher')]",
        "type": "[variables('extensionName')]",
        "typeHandlerVersion": "[variables('extensionVersion')]",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "EncryptionOperation": "EnableEncryption",
          "KeyVaultURL": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2023-07-01').vaultUri]",
          "KeyVaultResourceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
          "KeyEncryptionAlgorithm": "RSA-OAEP",
          "VolumeType": "Data",
          "KeyEncryptionKeyURL": "[reference(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('keyName')), '2023-07-01').keyUriWithVersion]",
          "KekVaultResourceId": "[split(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('keyName')), '/keys')[0]]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
        "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('keyName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
        "[extensionResourceId(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('keyName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('keyName')), resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), variables('roleDefKeyVaultCryptoServiceReleaseUser')))]"
      ]
    }
  ]
}